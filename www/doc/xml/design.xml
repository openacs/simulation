<?xml version='1.0' ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [ 
<!-- Global variables are defined in variables.ent -->
]>

  <article id="design">
    <title>Design</title>
    <sect1 id="interfaces">
      <title>Interfaces</title>
      <sect2 id="page-map">
        <title>Page Map</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="page-map.png" format="png"/>
          </imageobject>
        </mediaobject>
      </sect2>
      <sect2 id="tcl-api">
        <title>TCL API</title>
        <para><ulink url="/api-doc/proc-search?query_string=simulation%3A%3A&amp;search_type=All+matches">TCL API</ulink></para>
        <para>Each TCL API item should include inputs, outputs, and a
        comment block describing any non-obvious internal issues.</para>
      </sect2>
      <sect2 id="sql-api">
        <title>SQL API</title>
        <para>None yet.</para>
      </sect2>
    </sect1>
    <sect1 id="internals">
      <title>Internal Design</title>
      <sect2 id="data-model">
        <title>Data Model</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="data-model.png" format="png"/>
          </imageobject>
        </mediaobject>
      </sect2>
    </sect1>
    <sect1 id="permissions">
      <title>Permissions</title>
      <para><ulink url="permissions-table">Permissions Table</ulink> (<ulink url="permissions-table.sxc">OO spreadsheet</ulink>)</para>
    </sect1>
    
    <sect1 id="object-orientation-notes">
      <title>Notes on an object-oriented simulated space</title>
      <para>An OpenACS simulation is a collection of interactive
      objects, plus a set of roles and tasks.  In the first part, it
      is conceptually similar to a MOO (Multiple-User Dungeon,
      Object-Oriented).  This is a technology dating to 1990, in which
      a database of interactive objects is presented to users through
      a text interface.  MOOs, in turn, are based on MUDs
      (Multiple-User Dungeons), which are many years older.  More
      recently, MOOs have been supplanted by multi-million dollar
      commercial MMORPGs (Massively Multiplayer Online Roleplaying
      Games), which are essentially MOOs with graphical instead of
      textual interfaces.  Given their lineage and success, it makes
      sense to draw on MOO technology when designing our simulation
      object model.</para>

      <sect2 id="verbs">
        <title>Objects</title>
        <para>Basic MOO objects</para>
<programlisting>
Root Class
  Room
  Thing
    Note
    sittable object
      furniture
  Event-dispatching object
    Containing Object
      Player
        Builder
          programmer
            wizard
        Guest
    Exit
    Container
      Openable Container
</programlisting>

        <sect3>
          <title>Object Attributes</title>
          <para>(From the LambdaMOO Programmer's Manual</para>
          <programlisting>
There are three fundamental attributes to every object:

   1. A flag (either true or false) specifying whether or not the object represents a player,
   2. The object that is its parent, and
   3. A list of the objects that are its children; that is, those
   objects for which this object is their parent. </programlisting>
          <para>"Every object has eight built-in properties whose values are constrained to be of particular types. "</para>
          <programlisting>
name         a string, the usual name for this object
owner        an object, the player who controls access to it
location     an object, where the object is in virtual reality
contents     a list of objects, the inverse of `location'
programmer   a bit, does the object have programmer rights?
wizard       a bit, does the object have wizard rights?
r            a bit, is the object publicly readable?
w            a bit, is the object publicly writable?
f            a bit, is the object fertile?
</programlisting>
          
        </sect3>
      </sect2>


      <sect2 id="verbs">
        <title>Verbs</title>
        <para>Minimal MOO verbs:</para>
        <itemizedlist>
          <listitem>
            <para>put</para>
            <para>take</para>
            <para>get</para>
            <para>drop</para>
          </listitem>
        </itemizedlist>
      </sect2>
    </sect1>

    <sect1 id="simulation-lifecycle">
      <title>Lifecycle of a Simulation</title>
      <orderedlist>
        <listitem>
          <formalpara>
            <title>Template Not ready.</title>
            <para>  ready_p not true.  Only shows up in SimBuild lists.</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Template Ready</title>
            <para>Ready_p is true.  Shows up in list of available templates in SimBuild.</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Simulation in Development.</title>
            <para>Owned by a single person.  Shows up only in their Siminst page. between zero and all of the roles are mapped to characters.  Between zero and all of the tasks are developed (description added, attachment slots linked to sim objects).</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Simulation in Casting.</title>
            <para>Several paths depending on enrollment and casting type.</para>
          </formalpara>
          <table>
            <title>Casting Paths</title>
            <tgroup cols="3">
              <colspec colname="ca"/>
              <colspec colname="oa"/>
              <colspec colname="og"/>
              <colspec colname="oo"/>
              <thead>
                <row>
                  <entry>Closed Enrollment/Automatic Casting</entry>
                  <entry>Open Enrollment/Automatic Casting</entry>
                  <entry>Open Enrollment/Group Casting</entry>
                  <entry>Open Enrollment/Open Casting</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>set start/end date</entry>
                  <entry namest="oa" nameend="oo">set start/end date, enrollment dates</entry>
                </row>
                <row>
                  <entry namest="ca" nameend="oo">For each role, choose which user groups can be cast</entry>
                </row>
                <row>
                  <entry>Select user group(s) to enroll</entry>
                  <entry namest="oa" nameend="og">optionally restrict enrollment to selected groups.</entry>
                  <entry>optionally restrict enrollment to selected groups.  Set expected number of users.</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry namest="oa" nameend="oo">Users can go enroll themselves in simulations</entry>
                </row>
                <row>
                  <entry namest="ca" nameend="oa">Automatic casting creates cases and assigns users to groups in roles in cases</entry>
                  <entry>Users see a list of groups, and choose which group to join.  After enrollment period is over, automatic casting creates cases and assigns groups to roles in cases</entry>
                  <entry>Users see a list of cases, roles in each case, and users in groups for each role.  Users can choose any available slot.  Admin can add new, empty cases.</entry>
                </row>
                <row>
                  <entry namest="ca" nameend="oo">Any empty slots remaining are assigned to the professor</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </listitem>
        <listitem>
          <formalpara>
            <title>Live Simulation</title>
            <para>start date &lt; now &lt; end date.  Shows up in list of sims in Simplay for admin.  </para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>Finished Simulation</title>
            <para>now &gt; end date.  Shows up in special list in simplay.</para>
          </formalpara>
        </listitem>
      </orderedlist>
    </sect1>
  </article>
  



